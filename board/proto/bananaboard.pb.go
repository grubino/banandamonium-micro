// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bananaboard.proto

/*
Package bananaboard is a generated protocol buffer package.

It is generated from these files:
	bananaboard.proto

It has these top-level messages:
	MoveRequest
	MoveResponse
*/
package bananaboard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bananarandom "random/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MoveRequest struct {
	PlayerId  int32   `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	MonkeyId  []int32 `protobuf:"varint,2,rep,packed,name=monkeyId" json:"monkeyId,omitempty"`
	DiceIndex []int32 `protobuf:"varint,3,rep,packed,name=diceIndex" json:"diceIndex,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MoveRequest) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *MoveRequest) GetMonkeyId() []int32 {
	if m != nil {
		return m.MonkeyId
	}
	return nil
}

func (m *MoveRequest) GetDiceIndex() []int32 {
	if m != nil {
		return m.DiceIndex
	}
	return nil
}

type MoveResponse struct {
	Moved bool   `protobuf:"varint,1,opt,name=moved" json:"moved,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MoveResponse) GetMoved() bool {
	if m != nil {
		return m.Moved
	}
	return false
}

func (m *MoveResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*MoveRequest)(nil), "MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "MoveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BananaBoard service

type BananaBoardClient interface {
	RollDice(ctx context.Context, in *bananarandom.RollRequest, opts ...client.CallOption) (*bananarandom.RollResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error)
}

type bananaBoardClient struct {
	c           client.Client
	serviceName string
}

func NewBananaBoardClient(serviceName string, c client.Client) BananaBoardClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "bananaboard"
	}
	return &bananaBoardClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *bananaBoardClient) RollDice(ctx context.Context, in *bananarandom.RollRequest, opts ...client.CallOption) (*bananarandom.RollResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BananaBoard.RollDice", in)
	out := new(bananarandom.RollResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bananaBoardClient) Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BananaBoard.Move", in)
	out := new(MoveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BananaBoard service

type BananaBoardHandler interface {
	RollDice(context.Context, *bananarandom.RollRequest, *bananarandom.RollResponse) error
	Move(context.Context, *MoveRequest, *MoveResponse) error
}

func RegisterBananaBoardHandler(s server.Server, hdlr BananaBoardHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BananaBoard{hdlr}, opts...))
}

type BananaBoard struct {
	BananaBoardHandler
}

func (h *BananaBoard) RollDice(ctx context.Context, in *bananarandom.RollRequest, out *bananarandom.RollResponse) error {
	return h.BananaBoardHandler.RollDice(ctx, in, out)
}

func (h *BananaBoard) Move(ctx context.Context, in *MoveRequest, out *MoveResponse) error {
	return h.BananaBoardHandler.Move(ctx, in, out)
}

func init() { proto.RegisterFile("bananaboard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x85, 0x9b, 0x96, 0xa2, 0xf4, 0x9a, 0x0e, 0x58, 0x0c, 0x91, 0x85, 0x44, 0x64, 0x09, 0xa9,
	0x2c, 0xae, 0x04, 0x1b, 0x63, 0xc5, 0x92, 0x81, 0xc5, 0x7f, 0x00, 0x39, 0xf1, 0x0d, 0x15, 0x89,
	0x2f, 0x38, 0xa5, 0xa2, 0xff, 0x1e, 0xd9, 0x57, 0x20, 0x9b, 0xbf, 0xf7, 0x2c, 0xbd, 0xf7, 0x0e,
	0x6e, 0x1a, 0xeb, 0xad, 0xb7, 0x0d, 0xd9, 0xe0, 0xf4, 0x10, 0xe8, 0x48, 0xf2, 0x3e, 0x58, 0xef,
	0xa8, 0xdf, 0x25, 0xda, 0xb1, 0xcf, 0x12, 0x7f, 0x50, 0x2d, 0xac, 0xdf, 0xe8, 0x84, 0x06, 0x3f,
	0xbf, 0x70, 0x3c, 0x0a, 0x09, 0xf9, 0xd0, 0xd9, 0x33, 0x86, 0xda, 0x95, 0x59, 0x95, 0x6d, 0x97,
	0xe6, 0x8f, 0xa3, 0xd7, 0x93, 0xff, 0xc0, 0x73, 0xed, 0xca, 0x79, 0xb5, 0x88, 0xde, 0x2f, 0x8b,
	0x3b, 0x58, 0xb9, 0x43, 0x8b, 0xb5, 0x77, 0xf8, 0x5d, 0x2e, 0x92, 0xf9, 0x2f, 0xa8, 0x17, 0x28,
	0x38, 0x64, 0x1c, 0xc8, 0x8f, 0x28, 0x6e, 0x61, 0xd9, 0xd3, 0x09, 0x39, 0x22, 0x37, 0x0c, 0x51,
	0xc5, 0x10, 0x28, 0x94, 0xf3, 0x2a, 0xdb, 0xae, 0x0c, 0xc3, 0xd3, 0x3b, 0xac, 0xf7, 0xa9, 0xf6,
	0x3e, 0xce, 0x12, 0x8f, 0x90, 0x1b, 0xea, 0xba, 0xd7, 0x43, 0x8b, 0xa2, 0xd0, 0xf1, 0x79, 0xa9,
	0x2e, 0x37, 0x17, 0xe2, 0x0c, 0x35, 0x13, 0x0f, 0x70, 0x15, 0x53, 0x45, 0xa1, 0x27, 0x0b, 0xe5,
	0x46, 0x4f, 0xab, 0xa8, 0x59, 0x73, 0x9d, 0x0e, 0xf1, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x97,
	0x6b, 0x48, 0x04, 0x3e, 0x01, 0x00, 0x00,
}
