// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bananaboard.proto

/*
Package bananaboard is a generated protocol buffer package.

It is generated from these files:
	bananaboard.proto

It has these top-level messages:
	MonkeyMove
	MoveRequest
	MoveResponse
	BoardInfoRequest
	MonkeyPlacements
	BoardInfo
	BoardInfoResponse
	RegisterDiceRollRequest
	RegisterDiceRollResponse
*/
package bananaboard

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MonkeyMove struct {
	MonkeyIndex int32 `protobuf:"varint,1,opt,name=monkeyIndex" json:"monkeyIndex,omitempty"`
	PlaceIndex  int32 `protobuf:"varint,2,opt,name=placeIndex" json:"placeIndex,omitempty"`
}

func (m *MonkeyMove) Reset()                    { *m = MonkeyMove{} }
func (m *MonkeyMove) String() string            { return proto.CompactTextString(m) }
func (*MonkeyMove) ProtoMessage()               {}
func (*MonkeyMove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MonkeyMove) GetMonkeyIndex() int32 {
	if m != nil {
		return m.MonkeyIndex
	}
	return 0
}

func (m *MonkeyMove) GetPlaceIndex() int32 {
	if m != nil {
		return m.PlaceIndex
	}
	return 0
}

type MoveRequest struct {
	GameId      int64         `protobuf:"varint,1,opt,name=gameId" json:"gameId,omitempty"`
	PlayerId    int32         `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
	MonkeyMoves []*MonkeyMove `protobuf:"bytes,3,rep,name=monkeyMoves" json:"monkeyMoves,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MoveRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MoveRequest) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *MoveRequest) GetMonkeyMoves() []*MonkeyMove {
	if m != nil {
		return m.MonkeyMoves
	}
	return nil
}

type MoveResponse struct {
	Moved bool   `protobuf:"varint,1,opt,name=moved" json:"moved,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MoveResponse) GetMoved() bool {
	if m != nil {
		return m.Moved
	}
	return false
}

func (m *MoveResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type BoardInfoRequest struct {
	GameId int64 `protobuf:"varint,1,opt,name=gameId" json:"gameId,omitempty"`
}

func (m *BoardInfoRequest) Reset()                    { *m = BoardInfoRequest{} }
func (m *BoardInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*BoardInfoRequest) ProtoMessage()               {}
func (*BoardInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BoardInfoRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

type MonkeyPlacements struct {
	PlayerId    int32   `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	MonkeyIndex []int32 `protobuf:"varint,2,rep,packed,name=monkeyIndex" json:"monkeyIndex,omitempty"`
	PlaceIndex  int32   `protobuf:"varint,3,opt,name=placeIndex" json:"placeIndex,omitempty"`
}

func (m *MonkeyPlacements) Reset()                    { *m = MonkeyPlacements{} }
func (m *MonkeyPlacements) String() string            { return proto.CompactTextString(m) }
func (*MonkeyPlacements) ProtoMessage()               {}
func (*MonkeyPlacements) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MonkeyPlacements) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *MonkeyPlacements) GetMonkeyIndex() []int32 {
	if m != nil {
		return m.MonkeyIndex
	}
	return nil
}

func (m *MonkeyPlacements) GetPlaceIndex() int32 {
	if m != nil {
		return m.PlaceIndex
	}
	return 0
}

type BoardInfo struct {
	GameId          int64               `protobuf:"varint,1,opt,name=gameId" json:"gameId,omitempty"`
	PlayerId        []int32             `protobuf:"varint,2,rep,packed,name=playerId" json:"playerId,omitempty"`
	CurrentPlayerId int32               `protobuf:"varint,3,opt,name=currentPlayerId" json:"currentPlayerId,omitempty"`
	NumberOfDice    int32               `protobuf:"varint,4,opt,name=numberOfDice" json:"numberOfDice,omitempty"`
	Monkeys         []*MonkeyPlacements `protobuf:"bytes,5,rep,name=monkeys" json:"monkeys,omitempty"`
}

func (m *BoardInfo) Reset()                    { *m = BoardInfo{} }
func (m *BoardInfo) String() string            { return proto.CompactTextString(m) }
func (*BoardInfo) ProtoMessage()               {}
func (*BoardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BoardInfo) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *BoardInfo) GetPlayerId() []int32 {
	if m != nil {
		return m.PlayerId
	}
	return nil
}

func (m *BoardInfo) GetCurrentPlayerId() int32 {
	if m != nil {
		return m.CurrentPlayerId
	}
	return 0
}

func (m *BoardInfo) GetNumberOfDice() int32 {
	if m != nil {
		return m.NumberOfDice
	}
	return 0
}

func (m *BoardInfo) GetMonkeys() []*MonkeyPlacements {
	if m != nil {
		return m.Monkeys
	}
	return nil
}

type BoardInfoResponse struct {
	BoardInfo *BoardInfo `protobuf:"bytes,1,opt,name=boardInfo" json:"boardInfo,omitempty"`
}

func (m *BoardInfoResponse) Reset()                    { *m = BoardInfoResponse{} }
func (m *BoardInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*BoardInfoResponse) ProtoMessage()               {}
func (*BoardInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BoardInfoResponse) GetBoardInfo() *BoardInfo {
	if m != nil {
		return m.BoardInfo
	}
	return nil
}

type RegisterDiceRollRequest struct {
	GameId   int64 `protobuf:"varint,1,opt,name=gameId" json:"gameId,omitempty"`
	PlayerId int32 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (m *RegisterDiceRollRequest) Reset()                    { *m = RegisterDiceRollRequest{} }
func (m *RegisterDiceRollRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterDiceRollRequest) ProtoMessage()               {}
func (*RegisterDiceRollRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RegisterDiceRollRequest) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *RegisterDiceRollRequest) GetPlayerId() int32 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type RegisterDiceRollResponse struct {
	Results []int32 `protobuf:"varint,1,rep,packed,name=results" json:"results,omitempty"`
}

func (m *RegisterDiceRollResponse) Reset()                    { *m = RegisterDiceRollResponse{} }
func (m *RegisterDiceRollResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterDiceRollResponse) ProtoMessage()               {}
func (*RegisterDiceRollResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RegisterDiceRollResponse) GetResults() []int32 {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterType((*MonkeyMove)(nil), "MonkeyMove")
	proto.RegisterType((*MoveRequest)(nil), "MoveRequest")
	proto.RegisterType((*MoveResponse)(nil), "MoveResponse")
	proto.RegisterType((*BoardInfoRequest)(nil), "BoardInfoRequest")
	proto.RegisterType((*MonkeyPlacements)(nil), "MonkeyPlacements")
	proto.RegisterType((*BoardInfo)(nil), "BoardInfo")
	proto.RegisterType((*BoardInfoResponse)(nil), "BoardInfoResponse")
	proto.RegisterType((*RegisterDiceRollRequest)(nil), "RegisterDiceRollRequest")
	proto.RegisterType((*RegisterDiceRollResponse)(nil), "RegisterDiceRollResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BananaBoard service

type BananaBoardClient interface {
	Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error)
	BoardInfo(ctx context.Context, in *BoardInfoRequest, opts ...client.CallOption) (*BoardInfoResponse, error)
	RegisterDiceRoll(ctx context.Context, in *RegisterDiceRollRequest, opts ...client.CallOption) (*RegisterDiceRollResponse, error)
}

type bananaBoardClient struct {
	c           client.Client
	serviceName string
}

func NewBananaBoardClient(serviceName string, c client.Client) BananaBoardClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "bananaboard"
	}
	return &bananaBoardClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *bananaBoardClient) Move(ctx context.Context, in *MoveRequest, opts ...client.CallOption) (*MoveResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BananaBoard.Move", in)
	out := new(MoveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bananaBoardClient) BoardInfo(ctx context.Context, in *BoardInfoRequest, opts ...client.CallOption) (*BoardInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BananaBoard.BoardInfo", in)
	out := new(BoardInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bananaBoardClient) RegisterDiceRoll(ctx context.Context, in *RegisterDiceRollRequest, opts ...client.CallOption) (*RegisterDiceRollResponse, error) {
	req := c.c.NewRequest(c.serviceName, "BananaBoard.RegisterDiceRoll", in)
	out := new(RegisterDiceRollResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BananaBoard service

type BananaBoardHandler interface {
	Move(context.Context, *MoveRequest, *MoveResponse) error
	BoardInfo(context.Context, *BoardInfoRequest, *BoardInfoResponse) error
	RegisterDiceRoll(context.Context, *RegisterDiceRollRequest, *RegisterDiceRollResponse) error
}

func RegisterBananaBoardHandler(s server.Server, hdlr BananaBoardHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&BananaBoard{hdlr}, opts...))
}

type BananaBoard struct {
	BananaBoardHandler
}

func (h *BananaBoard) Move(ctx context.Context, in *MoveRequest, out *MoveResponse) error {
	return h.BananaBoardHandler.Move(ctx, in, out)
}

func (h *BananaBoard) BoardInfo(ctx context.Context, in *BoardInfoRequest, out *BoardInfoResponse) error {
	return h.BananaBoardHandler.BoardInfo(ctx, in, out)
}

func (h *BananaBoard) RegisterDiceRoll(ctx context.Context, in *RegisterDiceRollRequest, out *RegisterDiceRollResponse) error {
	return h.BananaBoardHandler.RegisterDiceRoll(ctx, in, out)
}

func init() { proto.RegisterFile("bananaboard.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0xdd, 0x34, 0xdd, 0xb6, 0x3b, 0x59, 0xc4, 0xc6, 0x42, 0x60, 0x72, 0x40, 0x91, 0x25, 0xa4,
	0x08, 0x84, 0x0f, 0x4b, 0x4f, 0x48, 0x5c, 0x2a, 0x2e, 0x39, 0x2c, 0x54, 0xfe, 0x83, 0x64, 0x33,
	0xad, 0x2a, 0x12, 0x3b, 0xd8, 0x49, 0x45, 0x3f, 0x8c, 0x0b, 0x5f, 0x87, 0x62, 0x27, 0xdd, 0x6c,
	0x56, 0x0b, 0x48, 0x3d, 0xbe, 0xe7, 0xa7, 0x99, 0x37, 0xcf, 0x33, 0x10, 0xe6, 0x99, 0xcc, 0x64,
	0x96, 0xab, 0x4c, 0x17, 0xbc, 0xd6, 0xaa, 0x51, 0xec, 0x2b, 0xc0, 0x46, 0xc9, 0xef, 0xf8, 0xb0,
	0x51, 0xf7, 0x48, 0x62, 0x08, 0x2a, 0x8b, 0x52, 0x59, 0xe0, 0x4f, 0xea, 0xc5, 0x5e, 0x32, 0x17,
	0x63, 0x8a, 0xbc, 0x01, 0xa8, 0xcb, 0x6c, 0x8b, 0x4e, 0x70, 0x62, 0x05, 0x23, 0x86, 0xd5, 0x10,
	0x74, 0x95, 0x04, 0xfe, 0x68, 0xd1, 0x34, 0xe4, 0x25, 0x9c, 0xdd, 0x66, 0x15, 0xa6, 0x85, 0xad,
	0xe5, 0x8b, 0x1e, 0x91, 0x08, 0x2e, 0xea, 0x32, 0x7b, 0x40, 0x9d, 0x16, 0x7d, 0x91, 0x47, 0x4c,
	0x3e, 0x0c, 0x26, 0xba, 0x42, 0x86, 0xfa, 0xb1, 0x9f, 0x04, 0xeb, 0x80, 0xef, 0x6c, 0x8a, 0xf1,
	0x3b, 0xfb, 0x04, 0x4b, 0xd7, 0xd1, 0xd4, 0x4a, 0x1a, 0x24, 0x2f, 0x60, 0x5e, 0xa9, 0x7b, 0x74,
	0x1d, 0x2f, 0x84, 0x03, 0x1d, 0x8b, 0x5a, 0x2b, 0x6d, 0xbb, 0x2d, 0x84, 0x03, 0xec, 0x1d, 0xac,
	0xae, 0xba, 0x30, 0x52, 0x79, 0xa3, 0xfe, 0x61, 0x99, 0xd5, 0xb0, 0x72, 0x16, 0xae, 0xbb, 0x69,
	0x2b, 0x94, 0x8d, 0xd9, 0x1b, 0xc3, 0x9b, 0x8c, 0x31, 0xc9, 0xf2, 0x24, 0xf6, 0xff, 0x9e, 0xa5,
	0x7f, 0x90, 0xe5, 0x6f, 0x0f, 0x16, 0x8f, 0xf6, 0xfe, 0x33, 0x4a, 0x7f, 0xcf, 0x43, 0x02, 0xcf,
	0xb7, 0xad, 0xd6, 0x28, 0x9b, 0xeb, 0x41, 0xe2, 0xda, 0x4c, 0x69, 0xc2, 0x60, 0x29, 0xdb, 0x2a,
	0x47, 0xfd, 0xed, 0xe6, 0xcb, 0xdd, 0x16, 0xe9, 0xa9, 0x95, 0xed, 0x71, 0xe4, 0x3d, 0x9c, 0x3b,
	0xfb, 0x86, 0xce, 0xed, 0xa7, 0x84, 0x7c, 0x9a, 0x88, 0x18, 0x14, 0xec, 0x33, 0x84, 0xa3, 0x68,
	0xfb, 0xbf, 0x49, 0x60, 0x91, 0x0f, 0xa4, 0x1d, 0x23, 0x58, 0x03, 0xdf, 0xc9, 0x76, 0x8f, 0x6c,
	0x03, 0xaf, 0x04, 0xde, 0xde, 0x99, 0x06, 0x75, 0xd7, 0x5b, 0xa8, 0xb2, 0x7c, 0xc2, 0x4e, 0xb1,
	0x4b, 0xa0, 0x87, 0xe5, 0x7a, 0x53, 0x14, 0xce, 0x35, 0x9a, 0xb6, 0x6c, 0x0c, 0xf5, 0x6c, 0x7e,
	0x03, 0x5c, 0xff, 0xf2, 0x20, 0xb8, 0xb2, 0x27, 0x63, 0x3d, 0x92, 0xb7, 0x70, 0x6a, 0xcf, 0x64,
	0xc9, 0x47, 0x3b, 0x1e, 0x3d, 0xe3, 0xe3, 0xfd, 0x63, 0x33, 0x72, 0x39, 0xfe, 0xb6, 0x90, 0x4f,
	0x37, 0x2c, 0x22, 0xfc, 0x20, 0x19, 0x36, 0x23, 0x29, 0xac, 0xa6, 0x16, 0x09, 0xe5, 0x47, 0x42,
	0x88, 0x5e, 0xf3, 0x63, 0xf3, 0xb0, 0x59, 0x7e, 0x66, 0x6f, 0xfb, 0xe3, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xfc, 0xdb, 0x22, 0xfb, 0xf0, 0x03, 0x00, 0x00,
}
